let character = {
    location: 'city', // 'city', 'forest', 'mountains'
    travelCooldown: 0,
    name: '',
    level: 1,
    xp: 0,
    nextLevel: 100,
    strength: 5,
    magic: 5,
    health: 100,
    maxHealth: 100,
    mana: 100,
    maxMana: 100,
    coins: 50,
    class: '–ù–æ–≤–∏—á–æ–∫',
    abilities: [],
    inventory: [],
    maxInventory: 8,
    currentQuest: null,
    questProgress: 0,
    isAlive: true,
    isInBattle: false
};

let enemies = [
    { name: '–ì–æ–±–ª–∏–Ω', health: 20, attack: 5 },
    { name: '–û—Ä–∫', health: 40, attack: 10 },
    { name: '–î—Ä–∞–∫–æ–Ω', health: 100, attack: 20 },
    { name: '–Æ—Ä–µ—Ü', health: 1000, attack: 50 }
];

function startGame() {
    const name = document.getElementById('nameInput').value;
    if (!name) return;
    
    character.name = name;
    document.getElementById('nameInput').remove();
    document.querySelector('button').remove();
    
    gameInterval = setInterval(gameLoop, 3000);
    updateStats();
    addEvent(`–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! ${character.name} –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ.`);
}


function updateStats() {
    if (!character.isAlive) return;
    const statsDiv = document.getElementById('stats');
    statsDiv.innerHTML = `
        <div class="location">
        <p>–õ–æ–∫–∞—Ü–∏—è: ${LOCATIONS[character.location].name}</p>
        <p>–°–ª–µ–¥—É—é—â–µ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑: ${character.travelCooldown} —Ö–æ–¥–æ–≤</p>
        </div>
        <h3>${character.name}</h3>
        <p>–£—Ä–æ–≤–µ–Ω—å: ${character.level} (${character.xp}/${character.nextLevel} XP)</p>
        <p>–ö–ª–∞—Å—Å: ${character.class}</p>
        <p>–ú–æ–Ω–µ—Ç—ã: ${character.coins} ü™ô</p>
        <p>–°–∏–ª–∞: ${character.strength}</p>
        <p>–ú–∞–≥–∏—è: ${character.magic}</p>
        <p>–ó–¥–æ—Ä–æ–≤—å–µ: ${character.health}/${character.maxHealth}</p>
        ${character.class === '–ú–∞–≥' ? `<p>–ú–∞–Ω–∞: ${character.mana}/${character.maxMana}</p>` : ''}
        <div class="inventory">
    <h4>–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å (${character.inventory.length}/${character.maxInventory}):</h4>
    ${character.inventory.map(item => 
        `<div class="item" data-price="–¶–µ–Ω–∞: ${Math.floor(item.price * 0.7)}">
            ${item.name}
        </div>
                <div class="quest">
            <h4>–¢–µ–∫—É—â–∏–π –∫–≤–µ—Å—Ç:</h4>
            ${character.currentQuest ? 
                `<p>${formatQuestDescription(character.currentQuest)}</p>
                 <p>–ü—Ä–æ–≥—Ä–µ—Å—Å: ${character.questProgress}/${character.currentQuest.amount}</p>` 
                : '<p>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞</p>'}
        </div>`
    ).join('')}
        </div>
        ${getAbilityDescriptions()}
    `;
}

const QUESTS = {
    slay: {
        type: '–£–±–∏–π—Å—Ç–≤–æ',
        target: ['–ì–æ–±–ª–∏–Ω', '–û—Ä–∫', '–î—Ä–∞–∫–æ–Ω'],
        amount: [3, 5, 7],
        reward: { xp: 150, coins: 50 }
    },
    collect: {
        type: '–°–±–æ—Ä',
        target: ['–ó–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è', '–°–≤–∏—Ç–æ–∫ –æ–≥–Ω—è'],
        amount: [2, 4],
        reward: { item: '–≠–ª–∏–∫—Å–∏—Ä —Å–∏–ª—ã' }
    },
    explore: {
        type: '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ',
        target: ['–õ–µ—Å –¢–µ–Ω–µ–π', '–ü–∏–∫–∏ –•–∞–æ—Å–∞'],
        amount: [5, 8],
        reward: { xp: 200, coins: 100 }
    }
};

const LOCATIONS = {
    city: {
        name: '–°—Ç–æ–ª–∏—Ü–∞ –≠–ª—å–¥—Ä–∞–º–∏—Ä',
        danger: 0,
        description: '–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞ —Å –ª–µ—á–µ–±–Ω–∏—Ü–∞–º–∏ –∏ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏'
    },
    forest: {
        name: '–õ–µ—Å –¢–µ–Ω–µ–π',
        danger: 1,
        description: '–ì—É—Å—Ç–æ–π –ª–µ—Å —Å —Å–ª–∞–±—ã–º–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞–º–∏'
    },
    mountains: {
        name: '–ü–∏–∫–∏ –•–∞–æ—Å–∞',
        danger: 3,
        description: '–û–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞ —Å —Å–∏–ª—å–Ω—ã–º–∏ –≤—Ä–∞–≥–∞–º–∏'
    }
};

const items = {
    healthPotion: {
        name: '–ó–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è',
        effect: { health: 30 },
        price: 15,
        type: 'consumable'
    },
    manaPotion: {
        name: '–ó–µ–ª—å–µ –º–∞–Ω—ã',
        effect: { mana: 40 },
        price: 20,
        type: 'consumable'
    },
    scrollFire: {
        name: '–°–≤–∏—Ç–æ–∫ –æ–≥–Ω—è',
        effect: { damage: 50 },
        price: 35,
        type: 'combat'
    },
    elixir: {
        name: '–≠–ª–∏–∫—Å–∏—Ä —Å–∏–ª—ã',
        effect: { strength: 2 },
        price: 50,
        type: 'permanent'
    }
};

let gameInterval;

function getAbilityDescriptions() {
    if (character.class === '–í–æ–∏–Ω') {
        return Object.entries(warriorAbilities).map(([name, config]) => 
            `<p><strong>${name}:</strong> ${config.description}</p>`
        ).join('');
    }
    if (character.class === '–ú–∞–≥') {
        return Object.entries(mageAbilities).map(([name, config]) => 
            `<p><strong>${name}:</strong> ${config.description}</p>`
        ).join('');
    }
    return '';
}

// C–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–æ–≤
const warriorAbilities = {
    '–ú–æ—â–Ω—ã–π —É–¥–∞—Ä': {
        chance: 0.3,
        damageMultiplier: 2.5,
        description: '–®–∞–Ω—Å 30% –Ω–∞–Ω–µ—Å—Ç–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä'
    },
    '–Ø—Ä–æ—Å—Ç—å': {
        chance: 0.2,
        heal: 15,
        description: '–®–∞–Ω—Å 20% –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å 15 HP'
    }
};

const mageAbilities = {
    '–û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä': {
        chance: 0.4,
        damageMultiplier: 3,
        manaCost: 30,
        description: '–®–∞–Ω—Å 40% –≤—ã–ø—É—Å—Ç–∏—Ç—å –æ–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä (—Å—Ç–æ–∏–º–æ—Å—Ç—å 30 –º–∞–Ω—ã)'
    },
    '–ò—Å—Ü–µ–ª–µ–Ω–∏–µ': {
        chance: 0.25,
        heal: 25,
        manaCost: 20,
        description: '–®–∞–Ω—Å 25% –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å 25 HP (—Å—Ç–æ–∏–º–æ—Å—Ç—å 20 –º–∞–Ω—ã)'
    }
};

function addEvent(text) {
    const eventPanel = document.getElementById('eventPanel');
    const events = eventPanel.getElementsByClassName('event');
    
    // –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ —Å–æ–±—ã—Ç–∏–µ –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å 10
    if (events.length >= 10) {
        events[0].remove();
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
    const eventDiv = document.createElement('div');
    eventDiv.className = 'event';
    eventDiv.textContent = text;
    eventPanel.appendChild(eventDiv);
    
    // –ê–≤—Ç–æ-—Å–∫—Ä–æ–ª–ª –∫ –Ω–æ–≤–æ–º—É —Å–æ–±—ã—Ç–∏—é
    eventPanel.scrollTop = eventPanel.scrollHeight;
    updateQuestProgress(text);
}

function updateQuestProgress(eventText) {
    if (!character.currentQuest) return;
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –∫–≤–µ—Å—Ç–æ–≤ –Ω–∞ —É–±–∏–π—Å—Ç–≤–æ
    if (character.currentQuest.type === '–£–±–∏–π—Å—Ç–≤–æ' && 
        eventText.includes('–ø–æ–±–µ–∂–¥–∞–µ—Ç') && 
        eventText.includes(character.currentQuest.target)) {
        character.questProgress++;
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–≤–µ—Å—Ç–æ–≤
    if (character.currentQuest.type === '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ' && 
        eventText.includes(character.currentQuest.target)) {
        character.questProgress++;
    }
}

function gameLoop() {
    if (!character.isAlive || character.isInBattle) return;

    if (character.travelCooldown <= 0 && Math.random() < 0.25) {
        autoChangeLocation();
    } else {
        character.travelCooldown--;
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –≥–æ—Ä–æ–¥–µ
    if (character.location === 'city') {
        character.health = Math.min(character.health + 15, character.maxHealth);
        character.mana = Math.min(character.mana + 25, character.maxMana);
    }
    
    // –°–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ª–æ–∫–∞—Ü–∏–∏
    if (character.location !== 'city') {
        const dangerLevel = LOCATIONS[character.location].danger;
        const eventChance = 0.3 + dangerLevel * 0.2;
        
        if (Math.random() < eventChance) {
            handleRandomEvent(dangerLevel);
        }
    }
    
    // –ê–≤—Ç–æ-–≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–æ—Ä–æ–¥ –ø—Ä–∏ –Ω–∏–∑–∫–æ–º –∑–¥–æ—Ä–æ–≤—å–µ
    if (character.health < character.maxHealth * 0.3 && character.location !== 'city') {
        addEvent(`‚ùó${character.name} —Å–ø–µ—à–∏—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥ –¥–ª—è –ª–µ—á–µ–Ω–∏—è!`);
        move('city');
        return;
    }
    
    handleQuests();
    updateStats();
}

function autoChangeLocation() {
    const previousLocation = character.location;
    let newLocation;
    
    // –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏
    if (character.health < character.maxHealth * 0.4) {
        newLocation = 'city'; // –ê–≤—Ç–æ-–≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–æ—Ä–æ–¥ –ø—Ä–∏ –Ω–∏–∑–∫–æ–º –∑–¥–æ—Ä–æ–≤—å–µ
    } else {
        const locationKeys = Object.keys(LOCATIONS);
        newLocation = locationKeys.filter(l => l !== 'city')[Math.floor(Math.random() * (locationKeys.length - 1))];
        
        // 30% —à–∞–Ω—Å –æ—Å—Ç–∞—Ç—å—Å—è –≤ —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏
        if (Math.random() < 0.3) newLocation = character.location;
    }
    
    // –ù–µ –ø–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è, –µ—Å–ª–∏ –Ω–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–µ–π
    if (newLocation === character.location) return;
    
    character.location = newLocation;
    character.travelCooldown = 3 + Math.floor(Math.random() * 3);
    
    addEvent(`üó∫ ${character.name} –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –≤ ${LOCATIONS[newLocation].name}`);
    updateMapDisplay();
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏
    handleLocationEvent(previousLocation, newLocation);
}

function handleLocationEvent(oldLoc, newLoc) {
    if (newLoc === 'city') {
        addEvent("üè• –õ–µ–∫–∞—Ä—å –≥–æ—Ä–æ–¥–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç –ª–µ—á–µ–Ω–∏–µ...");
        character.health = character.maxHealth;
        character.mana = character.maxMana;
    } else {
        const dangers = ['—Å–ª—ã—à–∏—Ç —Å—Ç—Ä–∞–Ω–Ω—ã–µ –∑–≤—É–∫–∏', '–∑–∞–º–µ—á–∞–µ—Ç —Å–ª–µ–¥—ã', '—á—É–≤—Å—Ç–≤—É–µ—Ç –º–∞–≥–∏—á–µ—Å–∫—É—é –∞–Ω–æ–º–∞–ª–∏—é'];
        addEvent(`üå≤ –í ${LOCATIONS[newLoc].name} ${character.name} ${dangers[Math.floor(Math.random() * dangers.length)]}`);
    }
}

function updateMapDisplay() {
    const locationInfo = document.getElementById('locationInfo');
    locationInfo.innerHTML = `
        <strong>${LOCATIONS[character.location].name}</strong>
        <p>${LOCATIONS[character.location].description}</p>
        <p>–û–ø–∞—Å–Ω–æ—Å—Ç—å: ${'‚òÖ'.repeat(LOCATIONS[character.location].danger)}</p>
        <p>–°–ª–µ–¥—É—é—â–µ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑: ${character.travelCooldown} —Ö–æ–¥–æ–≤</p>
    `;
}   

function autoUseItems() {
    // –ê–≤—Ç–æ-–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–µ–ª–∏–π –∑–¥–æ—Ä–æ–≤—å—è
    if (character.health < character.maxHealth * 0.4) {
        const potion = character.inventory.find(i => i.name === '–ó–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è');
        if (potion) {
            useItem(potion);
            return;
        }
    }
    
    // –ê–≤—Ç–æ-–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–µ–ª–∏–π –º–∞–Ω—ã
    if (character.mana < character.maxMana * 0.3 && character.class === '–ú–∞–≥') {
        const potion = character.inventory.find(i => i.name === '–ó–µ–ª—å–µ –º–∞–Ω—ã');
        if (potion) {
            useItem(potion);
        }
    }
}

function useItem(item) {
    const index = character.inventory.indexOf(item);
    if (index > -1) {
        character.inventory.splice(index, 1);
        
        if (item.effect.health) {
            character.health = Math.min(character.health + item.effect.health, character.maxHealth);
            addEvent(`–ò–°–ü–û–õ–¨–ó–û–í–ê–ù: ${item.name} (+${item.effect.health} HP)`);
        }
        if (item.effect.mana) {
            character.mana = Math.min(character.mana + item.effect.mana, character.maxMana);
            addEvent(`–ò–°–ü–û–õ–¨–ó–û–í–ê–ù: ${item.name} (+${item.effect.mana} –º–∞–Ω—ã)`);
        }
        if (item.effect.strength) {
            character.strength += item.effect.strength;
            addEvent(`–ò–°–ü–û–õ–¨–ó–û–í–ê–ù: ${item.name} (+${item.effect.strength} —Å–∏–ª—ã)`);
        }
        if (character.currentQuest?.type === '–°–±–æ—Ä' && item.name === character.currentQuest.target) {
            character.questProgress++;
        }
    }
    updateStats();
}
function handleQuests() {
    // –ü—Ä–∏–Ω–∏–º–∞–µ–º –Ω–æ–≤—ã–π –∫–≤–µ—Å—Ç –≤ –≥–æ—Ä–æ–¥–µ
    if (character.location === 'city' && !character.currentQuest) {
        generateNewQuest();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
    if (character.currentQuest) {
        checkQuestProgress();
    }
}

function generateNewQuest() {
    const questTypes = Object.keys(QUESTS);
    const type = questTypes[Math.floor(Math.random() * questTypes.length)];
    const quest = QUESTS[type];
    
    character.currentQuest = {
        type: quest.type,
        target: quest.target[Math.floor(Math.random() * quest.target.length)],
        amount: quest.amount[Math.floor(Math.random() * quest.amount.length)],
        progress: 0,
        reward: {...quest.reward}
    };
    
    addEvent(`üìú –ü—Ä–∏–Ω—è—Ç –Ω–æ–≤—ã–π –∫–≤–µ—Å—Ç: ${formatQuestDescription(character.currentQuest)}`);
}

function formatQuestDescription(quest) {
    const descriptions = {
        '–£–±–∏–π—Å—Ç–≤–æ': `–ü–æ–±–µ–¥–∏—Ç—å ${quest.amount} ${quest.target}`,
        '–°–±–æ—Ä': `–°–æ–±—Ä–∞—Ç—å ${quest.amount} ${quest.target}`,
        '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ': `–ü–æ—Å–µ—Ç–∏—Ç—å ${quest.target} ${quest.amount} —Ä–∞–∑`
    };
    return descriptions[quest.type];
}

function checkQuestProgress() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π
    let isCompleted = false;
    
    switch(character.currentQuest.type) {
        case '–£–±–∏–π—Å—Ç–≤–æ':
            isCompleted = (character.questProgress >= character.currentQuest.amount);
            break;
        case '–°–±–æ—Ä':
            const collected = character.inventory.filter(i => i.name === character.currentQuest.target).length;
            isCompleted = (collected >= character.currentQuest.amount);
            break;
        case '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ':
            isCompleted = (character.questProgress >= character.currentQuest.amount);
            break;
    }
    
    // –ï—Å–ª–∏ –∫–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω
    if (isCompleted) {
        completeQuest();
    }
}

function completeQuest() {
    addEvent(`üéâ –ö–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω: ${formatQuestDescription(character.currentQuest)}`);
    
    // –í—ã–¥–∞—á–∞ –Ω–∞–≥—Ä–∞–¥
    const reward = character.currentQuest.reward;
    if (reward.xp) {
        character.xp += reward.xp;
        addEvent(`–ù–∞–≥—Ä–∞–¥–∞: +${reward.xp} XP`);
    }
    if (reward.coins) {
        character.coins += reward.coins;
        addEvent(`–ù–∞–≥—Ä–∞–¥–∞: +${reward.coins} –º–æ–Ω–µ—Ç`);
    }
    if (reward.item) {
        character.inventory.push({...items[Object.keys(items).find(k => items[k].name === reward.item)]});
        addEvent(`–ù–∞–≥—Ä–∞–¥–∞: –ü–æ–ª—É—á–µ–Ω ${reward.item}`);
    }
    
    // –°–±—Ä–æ—Å –∫–≤–µ—Å—Ç–∞
    character.currentQuest = null;
    character.questProgress = 0;
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–æ—Ä–æ–¥
    if (character.location !== 'city') {
        character.location = 'city';
        addEvent("üèÉ –ì–µ—Ä–æ–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ü–µ–ª–∏");
        updateMapDisplay();
    }
}

function meetTrader() {
    const itemKeys = Object.keys(items);
    const randomItem = items[itemKeys[Math.floor(Math.random() * itemKeys.length)]];
    const price = Math.floor(randomItem.price * (1 + Math.random() * 0.5));
    
    addEvent(`–¢–û–†–ì–û–í–ï–¶: –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç ${randomItem.name} –∑–∞ ${price} –º–æ–Ω–µ—Ç`);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∫—É–ø–∫–∞
    if (shouldBuyItem(randomItem, price)) {
        // –ü—Ä–æ–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –º–µ—Å—Ç–æ/–¥–µ–Ω—å–≥–∏
        while (character.coins < price || character.inventory.length >= character.maxInventory) {
            if (!sellWorstItem()) break;
        }
        
        if (character.coins >= price && character.inventory.length < character.maxInventory) {
            character.coins -= price;
            character.inventory.push({...randomItem});
            addEvent(`–ê–í–¢–û-–ü–û–ö–£–ü–ö–ê: –ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω ${randomItem.name}`);
        }
    }
}

function handleRandomEvent() {
    const events = [
        {
            type: 'battle',
            weight: 0.6,
            action: () => startBattle()
        },
        {
            type: 'treasure',
            weight: 0.3,
            action: () => {
                const coins = 20 + 666 * 15;
                character.coins += coins;
                addEvent(`–ù–∞–π–¥–µ–Ω –∫–ª–∞–¥! –ü–æ–ª—É—á–µ–Ω–æ ${coins} –º–æ–Ω–µ—Ç`);
            }
        },
        {
            type: 'trader',
            weight: 0.1,
            action: () => meetTrader()
        }
    ];
    
    const totalWeight = events.reduce((sum, e) => sum + e.weight, 0);
    const random = Math.random() * totalWeight;
    
    let cumulative = 0;
    for (const event of events) {
        cumulative += event.weight;
        if (random < cumulative) {
            event.action();
            break;
        }
    }
}


function shouldBuyItem(item, price) {
    const inventoryCount = character.inventory.filter(i => i.name === item.name).length;
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –ø–æ–∫—É–ø–∫–∏
    const buyPriorities = {
        '–ó–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è': character.health < character.maxHealth * 0.6,
        '–ó–µ–ª—å–µ –º–∞–Ω—ã': character.mana < character.maxMana * 0.5 && character.class === '–ú–∞–≥',
        '–≠–ª–∏–∫—Å–∏—Ä —Å–∏–ª—ã': true, // –í—Å–µ–≥–¥–∞ –ø–æ–∫—É–ø–∞—Ç—å
        '–°–≤–∏—Ç–æ–∫ –æ–≥–Ω—è': character.inventory.filter(i => i.name === '–°–≤–∏—Ç–æ–∫ –æ–≥–Ω—è').length < 2
    };
    
    return (buyPriorities[item.name] || false) && 
           price <= character.coins * 0.75 &&
           inventoryCount < 3;
}

function sellWorstItem() {
    if (character.inventory.length === 0) return false;
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –ø—Ä–æ–¥–∞–∂–∏ (–æ—Ç –Ω–∞–∏–º–µ–Ω–µ–µ –ø–æ–ª–µ–∑–Ω–æ–≥–æ)
    const sellPriority = [
        '–°–≤–∏—Ç–æ–∫ –æ–≥–Ω—è',
        '–ó–µ–ª—å–µ –º–∞–Ω—ã',
        '–ó–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è',
        '–≠–ª–∏–∫—Å–∏—Ä —Å–∏–ª—ã'
    ];
    
    // –ù–∞—Ö–æ–¥–∏–º —Ö—É–¥—à–∏–π –ø—Ä–µ–¥–º–µ—Ç
    let worstItem;
    for (const itemType of sellPriority) {
        worstItem = character.inventory.find(i => i.name === itemType);
        if (worstItem) break;
    }
    
    if (!worstItem) worstItem = character.inventory[0];
    
    // –ü—Ä–æ–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
    const sellPrice = Math.floor(worstItem.price * 0.7);
    character.coins += sellPrice;
    character.inventory.splice(character.inventory.indexOf(worstItem), 1);
    addEvent(`–ê–í–¢–û-–ü–†–û–î–ê–ñ–ê: –ü—Ä–æ–¥–∞–Ω ${worstItem.name} –∑–∞ ${sellPrice} –º–æ–Ω–µ—Ç`);
    
    return true;
}

function findItem() {
    const rand = Math.random();
    if (rand < 0.4) {
        const coins = Math.floor(Math.random() * 30) + 10;
        character.coins += coins;
        addEvent(`${character.name} –Ω–∞—à–µ–ª ${coins} –º–æ–Ω–µ—Ç!`);
    } else {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç –º–µ—Å—Ç–∞
        if (character.inventory.length >= character.maxInventory) {
            if (sellWorstItem()) {
                addEvent(`${character.name} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–∞–ª –ø—Ä–µ–¥–º–µ—Ç —á—Ç–æ–±—ã –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –º–µ—Å—Ç–æ!`);
            }
            return;
        }
        
        const itemKeys = Object.keys(items);
        const foundItem = items[itemKeys[Math.floor(Math.random() * itemKeys.length)]];
        character.inventory.push({...foundItem});
        addEvent(`${character.name} –Ω–∞—à–µ–ª ${foundItem.name}!`);
    }
}

function train() {
    if (Math.random() < 0.5) {
        character.strength += 1;
        addEvent(`${character.name} —Ç—Ä–µ–Ω–∏—Ä—É–µ—Ç—Å—è —Å –º–µ—á–æ–º! –°–∏–ª–∞ +1.`);
    } else {
        character.magic += 1;
        addEvent(`${character.name} –∏–∑—É—á–∞–µ—Ç –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è! –ú–∞–≥–∏—è +1.`);
    }
}

function calculateDamage(attacker, defender) {
    if (attacker === character) {
        let baseDamage, abilityUsed = false;
        
        if (character.class === '–í–æ–∏–Ω') {
            baseDamage = character.strength * 2;
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –≤–æ–∏–Ω–∞
            for (const [ability, config] of Object.entries(warriorAbilities)) {
                if (Math.random() < config.chance) {
                    if (ability === '–ú–æ—â–Ω—ã–π —É–¥–∞—Ä') {
                        baseDamage *= config.damageMultiplier;
                        addEvent(`–°–ü–û–°–û–ë–ù–û–°–¢–¨: ${character.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ${ability}!`);
                        abilityUsed = true;
                    } else if (ability === '–Ø—Ä–æ—Å—Ç—å' && character.health < character.maxHealth) {
                        character.health = Math.min(character.health + config.heal, character.maxHealth);
                        addEvent(`–°–ü–û–°–û–ë–ù–û–°–¢–¨: ${character.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ${ability} (+${config.heal} HP)!`);
                        abilityUsed = true;
                    }
                    if (abilityUsed) break;
                }
            }
        } 
        if (character.class === '–ú–∞–≥') {
            baseDamage = character.magic * 2;
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –º–∞–≥–∞
            for (const [ability, config] of Object.entries(mageAbilities)) {
                if (Math.random() < config.chance && character.mana >= config.manaCost) {
                    if (ability === '–û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä') {
                        baseDamage *= config.damageMultiplier;
                        character.mana -= config.manaCost;
                        addEvent(`–°–ü–û–°–û–ë–ù–û–°–¢–¨: ${character.name} –≤—ã–∑—ã–≤–∞–µ—Ç ${ability}! (–ú–∞–Ω–∞ -${config.manaCost})`);
                        abilityUsed = true;
                    } else if (ability === '–ò—Å—Ü–µ–ª–µ–Ω–∏–µ' && character.health < character.maxHealth) {
                        character.health = Math.min(character.health + config.heal, character.maxHealth);
                        character.mana -= config.manaCost;
                        addEvent(`–°–ü–û–°–û–ë–ù–û–°–¢–¨: ${character.name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ${ability}! (+${config.heal} HP, –ú–∞–Ω–∞ -${config.manaCost})`);
                        abilityUsed = true;
                    }
                    if (abilityUsed) break;
                }
            }
        }
        else {
            baseDamage = character.strength

        }
        
        return Math.round(baseDamage);
    }
    return attacker.attack;
}
function attackCycle(attacker, defender) {
    return new Promise(resolve => {
        setTimeout(() => {
            const isPlayer = attacker === character;
            const damage = calculateDamage(attacker, defender);
            
            defender.health -= damage;
            addEvent(`–ê–¢–ê–ö–ê: ${attacker.name} –Ω–∞–Ω–æ—Å–∏—Ç ${damage} —É—Ä–æ–Ω–∞ ${defender.name}!`);
            
            updateStats();
            resolve();
        }, 3000);
    });
}

async function startBattle() {
    const damage = calculateDamage(attacker, defender);
    const scaledEnemies = enemies.map(enemy => ({
        ...enemy,
        health: enemy.health * (1 + 666 * 0.5),
        attack: enemy.attack * (1 + 666 * 0.3)
    }));
    
    const enemy = {...scaledEnemies[Math.floor(Math.random() * scaledEnemies.length)]};
    if (scroll) {
        enemy.health -= damage;
        addEvent(`–°–í–ò–¢–û–ö: ${scroll.name} –Ω–∞–Ω–æ—Å–∏—Ç ${scroll.effect.damage} —É—Ä–æ–Ω–∞!`);
        character.inventory.splice(character.inventory.indexOf(scroll), 1);
    }

    while (enemy.health > 0 && character.health > 0) {
        // –ê—Ç–∞–∫–∞ –∏–≥—Ä–æ–∫–∞
        await attackCycle(character, enemy);
        if (enemy.health <= 0) break;
        
        // –ê—Ç–∞–∫–∞ –≤—Ä–∞–≥–∞
        await attackCycle(enemy, character);
    }

    if (character.health > 0) {
        const xpGain = 1000 * 2;
        character.xp += xpGain;
        addEvent(`–ü–û–ë–ï–î–ê: ${character.name} –ø–æ–ª—É—á–∞–µ—Ç ${xpGain} XP!`);
        character.health = Math.min(character.health + 20, character.maxHealth);
    } 
    else {
        addEvent(`–ü–û–†–ê–ñ–ï–ù–ò–ï: ${character.name} –ø–∞–ª –≤ –±–æ—é...`);
        character.isAlive = false;
        clearInterval(gameInterval);
        showDeathMenu(); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å–º–µ—Ä—Ç–∏
    }
    
    character.isInBattle = false;
    updateStats();
}



function checkLevelUp() {
    if (character.xp >= character.nextLevel) {
        character.level++;
        character.xp -= character.nextLevel;
        character.nextLevel = Math.floor(character.nextLevel * 1.5);
        character.maxHealth += 20;
        character.health = character.maxHealth;
        
        if (character.level === 2) {
            character.class = character.strength > character.magic ? '–í–æ–∏–Ω' : '–ú–∞–≥';
            addEvent(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! ${character.name} —Å—Ç–∞–ª ${character.class}!`);
        }
        
        addEvent(`–£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω! –¢–µ–ø–µ—Ä—å ${character.name} —É—Ä–æ–≤–µ–Ω—å ${character.level}!`);
    }
}

function showDeathMenu() {
    document.getElementById('deathMenu').style.display = 'block';
    document.getElementById('statPanel').style.display = 'none';
    document.getElementById('eventPanel').style.display = 'none';
}

function hideDeathMenu() {
    document.getElementById('deathMenu').style.display = 'none';
    document.getElementById('statPanel').style.display = 'block';
    document.getElementById('eventPanel').style.display = 'block';
}

function restartGame() {
    // –°–±—Ä–æ—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫ –Ω–∞—á–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
    character = {
        name: character.name,
        level: 1,
        xp: 0,
        nextLevel: 100,
        strength: 5,
        magic: 5,
        health: 100,
        maxHealth: 100,
        class: '–ù–æ–≤–∏—á–æ–∫',
        isAlive: true,
        coins: 50,
        inventory: [],
        maxInventory: 8,
        mana: 100,
        maxMana: 100,
        abilities: [],
        isInBattle: false
    };
    
    // –û—á–∏—Å—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
    document.getElementById('eventPanel').innerHTML = '';
    
    hideDeathMenu();
    clearInterval(gameInterval);
    gameInterval = setInterval(gameLoop, 3000);
    updateStats();
    addEvent(`–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å –∑–∞–Ω–æ–≤–æ! ${character.name} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ –∂–∏–∑–Ω–∏.`);
}

function resurrectHero() {
    // –®—Ç—Ä–∞—Ñ—ã –∑–∞ –≤–æ—Å–∫—Ä–µ—à–µ–Ω–∏–µ
    character.coins = Math.floor(character.coins * 0.5);
    character.level = Math.max(1, character.level - 1);
    character.xp = 0;
    character.nextLevel = 100 * Math.pow(1.5, character.level - 1);
    
    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    character.health = character.maxHealth;
    character.isAlive = true;
    character.inventory = [];
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    hideDeathMenu();
    clearInterval(gameInterval);
    gameInterval = setInterval(gameLoop, 3000);
    updateStats();
    addEvent(`${character.name} –≤–æ—Å–∫—Ä–µ—Å –∏–∑ –º–µ—Ä—Ç–≤—ã—Ö! –ü–æ—Ç–µ—Ä—è–Ω 1 —É—Ä–æ–≤–µ–Ω—å –∏ 50% –º–æ–Ω–µ—Ç.`);
}